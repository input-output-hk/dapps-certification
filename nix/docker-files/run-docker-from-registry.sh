#NOTE: This file is automatically generated running directly
# `nix run .\#dockerApps.write-run-docker-from-registry`
# or consequently running `nix run .\#dockerApps.push-branch-to-docker-registry`
# if the script content has changed

# there should be one and only one argument
if [ "$#" -ne 1 ]; then
  echo "Usage: $0 <docker image>"
  exit 1
fi

dockerImage="$1"

# pull down the image

script="docker pull $dockerImage"
echo $script >&2
eval "$script"

# Use basename to remove the registry from the image name
containerName=$(basename "$dockerImage")
#remove the ':' character and replace it with '_'
containerName=${containerName//:/_}

docker_args="-t --platform linux/amd64 --name $containerName --restart on-failure"

if [ -n "$WALLET_ID" ]; then
  docker_args="$docker_args -e WALLET_ID=$WALLET_ID"
fi

if [ -n "$WALLET_ADDRESS" ]; then
  docker_args="$docker_args -e WALLET_ADDRESS=$WALLET_ADDRESS"
fi

if [ -n "$WALLET_PASSPHRASE" ]; then
  docker_args="$docker_args -e WALLET_PASSPHRASE=$WALLET_PASSPHRASE"
fi

if [ -n "$JWT_SECRET" ]; then
  docker_args="$docker_args -e JWT_SECRET=$JWT_SECRET"
fi

if [ -n "$WALLET_URL" ]; then
  docker_args="$docker_args -e WALLET_URL=$WALLET_URL"
fi

if [ -n "$WALLET_CERTIFICATION_PRICE" ]; then
  docker_args="$docker_args -e WALLET_CERTIFICATION_PRICE=$WALLET_CERTIFICATION_PRICE"
fi

if [ -n "$GH_ACCESS_TOKEN" ]; then
  docker_args="$docker_args -e GH_ACCESS_TOKEN=$GH_ACCESS_TOKEN"
fi

if [ -n "$JWT_EXPIRATION" ]; then
  docker_args="$docker_args -e JWT_EXPIRATION=$JWT_EXPIRATION"
fi

if [ -n "$SIGNATURE_TIMEOUT" ]; then
  docker_args="$docker_args -e SIGNATURE_TIMEOUT=$SIGNATURE_TIMEOUT"
fi

if [ -n "$USE_WHITELIST" ]; then
  docker_args="$docker_args -e USE_WHITELIST=$USE_WHITELIST"
fi

if [ -n "$UNSAFE_PLAIN_ADDRESS_AUTH" ]; then
  docker_args="$docker_args -e UNSAFE_PLAIN_ADDRESS_AUTH=$UNSAFE_PLAIN_ADDRESS_AUTH"
fi

if [ -n "$PORT" ]; then
  docker_args="$docker_args -e PORT=$PORT"
fi

if [ -n "$DB_PATH" ]; then
  docker_args="$docker_args -e DB_PATH=$DB_PATH"
fi

if [ -n "$MIN_AMOUNT_FOR_ADDRESS_RESERVATION" ]; then
  docker_args="$docker_args -e MIN_AMOUNT_FOR_ADDRESS_RESERVATION=$MIN_AMOUNT_FOR_ADDRESS_RESERVATION"
fi


if [[ -z "$PORT" ]]; then
  export PORT=9671
fi
docker_args="$docker_args -p $PORT:$PORT"


script="docker run $docker_args $dockerImage"
echo $script >&2
eval "$script"
