* Local instances
** Without Cicero
The ~plutus-certification~ program has a ~--local~ flag to run the service locally without using ~Cicero~ as a backend. While this is much faster and easier to set up, it has caveats:

- The code built from submitted runs is run unsandboxed. *Do not submit untrusted code to an instance running in local mode!*
- There will be divergence from how the service runs in production. We share many code paths (see ~dapps-certification-helpers~), but not all
** With Cicero
1. Check out the ~v1-maintenance~ branch
2. Run ~nix develop --command nixos-shell --flake .#vm-bigdisk~
3. Log in as root
4. Run dev-cicero
5. Open your browser to ~localhost:18080~
6. Click "Create New Action"
7. Input ~github.com/input-output-hk/dapps-certification-actions~ (or your own [[https://github.com/hashicorp/go-getter#url-format][go-getter URL]]) and list actions
8. Click ~plutus-certification/build-flake~, then once loaded go back and click ~plutus-certification/generate-flake~, then once loaded go back and click ~plutus-certification/run-certify~

Now ~Cicero~ is running at http://localhost:18080, which you can pass as ~--cicero-url~ to ~plutus-certification~.

** In local-mode
to run the service in local mode, run ~nix run .#plutus-certification -- --local ...~.

** Build it and run it with Docker
to run the service in docker, run ~./nix/docker-files/run-local.sh~.
In order to modify parameters, you can edit ~./nix/docker-files/default.env~.

** Running it with Docker without building (from docker registry, no nix is needed)
Regularry the developers are pushing into the docker registry the latest version of every branch.
To run the service without building it locally or even pulling the code, you can run the following command:

~sh <( curl -L -s bit.ly/3EM70du ) <brach-name> [--env-file <env-file>]~

Note: you can find how the default env file looks at ~./nix/docker-files/default.env~ but if it is not specified, the script will use the default one.

Examples:

TODO: replace ~bit.ly/3EM70du~ and `deploy/push-docker-by-branch` with the `master` link before merging
. We use this until the PR is approved because master is not yet compatible with these modifications

- ~sh <( curl -L -s bit.ly/3EM70du ) deploy/push-docker-by-branch~
- ~sh <( curl -L -s bit.ly/3EM70du ) deploy/push-docker-by-branch --env-file ./nix/docker-files/default.env~

** Pushing the docker image to the registry

- to push the official/tagged image use the following command:
    ~nix run .\#dockerApps.push-docker-image  -- <docker-registry> [<tag>]~
- to push the current branch to the docker registry use the following command:
    ~nix run .\#dockerApps.push-branch-to-docker-registry -- <docker-registry>~

NOTE: Temporarly, we use as the ~ghcr.io/demoiog~ for the docker registry. This will be changed in the future.
